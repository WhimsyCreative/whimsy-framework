<?xml version="1.0"?>
<ruleset name="WordPress Theme Coding Standards">
	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki -->
	<!-- See https://github.com/wimg/PHPCompatibility -->

	<!-- Set a description for this ruleset. -->
	<description>A custom set of code standard rules to check for WordPress themes.</description>

	<!-- Only check the PHP files. JS files are checked separately with JSCS and JSHint. -->
	<arg name="extensions" value="php"/>
	
	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<!-- Include the WordPress ruleset, with exclusions. -->
	<rule ref="WordPress">
		<exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact" />
		<exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect" />
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent" />
	</rule>

	<!-- Verify that the text_domain is set to the desired text-domain.
		 Multiple valid text domains can be provided as a comma-delimited list. -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="whimsy-framework" />
		</properties>
	</rule>

	<!-- Allow for theme specific exceptions to the file name rules based
		 on the theme hierarchy. -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true" />
		</properties>
	</rule>
	
	<!-- Exclude Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!--
	We may also want to to include all the rules in a standard.
	-->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, to see the names of
		the different Sniffs, as their rules are broken. From here, we can opt to
		exclude problematic sniffs like so.
		-->

		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing"/>
		<exclude name="WordPress.XSS.EscapeOutput"/>
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>

	<!-- Add in some extra rules from other standards. -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	<rule ref="Generic.Commenting.Todo"/>

	<!-- Check for PHP cross-version compatibility. -->
	<!--
	To enable this, the PHPCompatibility standard needs
	to be installed.
	See the readme for installation instructions:
	https://github.com/wimg/PHPCompatibility
	-->
	<!--
	<config name="testVersion" value="5.2-99.0"/>
	<rule ref="PHPCompatibility"/>
	-->


</ruleset>